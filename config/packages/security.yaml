security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
                users_in_memory:
            memory: 
                users:
                    admin: { password: $2y$10$haumeStwFTUIjpybuRlXbucf/k5BkCXOp4Pn8PgqJoJnMYIVC.F3K, roles: ROLE_ADMIN }
                    user: { password: $2y$10$zKlu4JFrUx11I1QBldhHY.V8eDXxjHfWT3SvVD591KN.EvChB3uuu, roles: ROLE_USER }
                    lambda: { password: $2y$10$Tzocv.qD0Wzca5EsCEXeNe5Fps4n5/xaoeVQX2kQmFek8VPdo0hxq }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: lazy
            provider: users_in_memory
            http_basic: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/ajouter/stage, roles: ROLE_USER }

    encoders:
        Symfony\Component\Security\Core\User\User:
            algorithm: bcrypt
            cost:      15

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER # un admin est aussi un utilisateur
